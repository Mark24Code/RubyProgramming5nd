a = Rational(2,5)
b = Rational(1,3)
p a
p b
c = a + b
p c
p c.to_f

d = Complex(0,2) ** 2
p d

p 1234567     #=> 1234567 
p 1_234_567   #=> 1234567
p 0b11111111  #=> 255
p 01234567    #=> 342391
p 0x12345678  #=> 305419896

p 1.234
p 1.234e4
p 1.234e-4

p 1 + 1 
p 1 + 1.0 
p 2 - 1 
p 2 - 1.0 
p 3 * 2 
p 3 * 2.0 
p 3 * -2.0 
p 5 / 2 
p 5 / 2.0 
p 5 % 2 
p 5 % 2.0 
p 5 ** 2
p 5 ** 0.5 
p 5 ** -2.0 
p 5 ** -2

# 指数为负整数的乘方返回的结果是表示有理数的 Rational 对象。
p 5.div(2)    #=> 2
p 5.div(2.2)  #=> 2 
p -5.div(2)   #=> -3
p -5.div(2.2) #=> -3

p 5.quo(2)      #=> (5/2)
p 5.quo(2.2)    #=> 2.2727272727272725
p -5.quo(2)     #=> (-5/2)
p -5.quo(2.2)   #=> -2.2727272727272725

## x.divmod(y)
## 将 x 除以 y 后的商和余数作为数组返回。商是将 x / y 的结果去掉小数点后的部分而得到的值。余数的符号与 y 的符号一致，余数的值为 x % y 的结果。

p 10.divmod(3.5)   #=> [2, 3.0]
p 10.divmod(-3.5)  #=> [-3, -0.5]
p -10.divmod(3.5)  #=> [-3, 0.5]
p -10.divmod(-3.5) #=> [2, -3.0]

p 10.remainder(3.5)   #=> 3.0 
p 10.remainder(-3.5)  #=> 3.0 
p -10.remainder(3.5)  #=> -3.0 
p -10.remainder(-3.5) #=> -3.0

## 以下是需要避免的情况
# p 1 / 0
# p 1 / 0.0
# p 0 / 0.0
# p 1.divmod(0) 
# p 1.divmod(0.0)

 

